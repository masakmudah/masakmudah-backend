generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String        @unique
  fullname     String?
  email        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  password     Password?
  savedRecipes SavedRecipe[]
  recipes      Recipe[]
}

model Password {
  id     String @id @default(cuid())
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Ingredient {
  id String @id @default(cuid())

  name String
  slug String @unique @default("")

  ingredientItems IngredientItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model IngredientItem {
  id String @id @default(cuid())

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String

  quantity    Int
  measurement String
  sequence    Int    @default(0)

  recipes Recipe[]
}

model Recipe {
  id String @id @default(cuid())

  name        String
  description String
  duration    String?
  imageURL    String
  slug        String  @unique @db.VarChar(255)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  categories      Category[]
  ingredientItems IngredientItem[]
  instructions    Json? // Array of Objects
  savedRecipes    SavedRecipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(cuid())

  name    String
  slug    String
  recipes Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedRecipe {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  recipeId  String
  recipes   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
